



--> QUAL √â A FINALIDADE DO PROJETO?üíª
    > O projeto tem como objetivo consultar um servidor ftp, capturar os arquivos que est√£o l√°, realizar a decodifica√ß√£o dos arquivos,
    inserir os dados decodificado dentro da plataforma TAGO.IO e remover o arquivo que j√° foi decodificado do diret√≥rio principal do servidor. 
    Para realizar todas as tarefas acima, o meu code precisa ser uma analysis externa da TAGO.IO.


 

--> QUAL √â O PONTO DE PARTIDA DO MEU ALGORITIMO("por onde ele come√ßa?")üõ£Ô∏è
    > O script tem como ponto de partida o arquivo index.js. Dentro deste arquivo, eu tenho uma fun√ß√£o chamada: Decoding_analysis, 
    esta fun√ß√£o ser√° respons√°vel por integrar o meu script local, com a plataforma da TAGO.IO.

    > Mas como essa integra√ß√£o acontece(meu script vs TAGO.IO)?
    Essa integra√ß√£o acontece quando eu instalo um npm(pr√≥pio da tago), fa√ßo a importa√ß√£o de uma classe(chamada "analysis") e na hora de instaci√°-la eu passa 2 argumentos(a minha fun√ß√£o e o token da analysis) 
    Para saber o que √© e como uma analysis funciona, eu recomendo ler a documenta√ß√£o da TAGO.IO,
    que explica o que √© uma analysis, como ela √© acionada, como criar e como rod√°-la de maneira externa(que √© o caso deste script). --> https://help.tago.io/portal/en/kb/articles/29-analysis-overview


   

--> QUANDO DEVO EXECUTAR O C√ìDIGO NA MINHA M√ÅQUINA LOCAL E QUANDO DEV SUB√ç-LO PARA A TAGO?üíº
    > Geralmente, enquanto o c√≥digo est√° em fase de desenvolvimento √© melhor desenvolv√™-lo na sua m√°quina local, pois com o compilador, voc√™ tem acesso a diversar ferramentas(ferramentas que voc√™ n√£o tem acesso dentro da TAGO).
    > Al√©m das ferramentas, voc√™ pode usar servi√ßos de terceiros, como: bibliotecas, frameworks etc... 
    > Ap√≥s terminar o desenvolvimento em sua m√°quina local, voc√™ precisa criar um "build" do projeto e sub√≠-lo para a TAGO.IO.

    > Como buildar o projeto e sub√≠-lo para a Tago? --> Aqui est√° um link da documenta√ß√£o da tago que vai te auxiliar nesse processo --> https://help.tago.io/portal/en/kb/articles/174-running-analysis-as-external-using-node-js#4_Use_Analysis-Builder_to_Upload_the_Script 




--> COMO FUNCIONA A ORGANIZA√á√ÉO DE PASTAS DO PROJETO?üìö
   > A pasta project √© respons√°vel por armazenar todo o nosso script. Dentro desta pasta, temos o arquivo: index.js. Respons√°vel por dar in√≠cio ao nosso algoritimo.
   > O arquivo index.js tem um alto n√≠vel de acoplamento com os m√≥dulos que est√£o armazenados dentro da pasta classes.
   > Dentro destas classes, temos 3 m√≥dulos: stu, soc, prov. Cada m√≥dulo possui uma classe respons√°vel por decodificar os arquivos pertencentes a cada device(device stu, device soc e messages prov).




--> REGRAS DE NEG√ìCIO

>> Decodifica√ß√£o de arquivos SOC




--> Como o algoritimo do c√≥digo funciona?
    > Bom, agora que voc√™ j√° sabe o m√≠nimo sobre a TAGO.IO, vou te explicar o algoritimo "bruto" do script.

